plugins {
    id("java")
    id("mockito.test-conventions")
}

description = "Test suite for Java 21 Mockito"

def bytebuddyAgentConf = configurations.create("bytebuddyAgent")

dependencies {
    implementation project(":mockito-core")
    testImplementation libs.junit4
    testImplementation libs.assertj
    testImplementation project(path: ':mockito-core', configuration: 'testUtil')
    bytebuddyAgent(libs.bytebuddy.agent) { setTransitive(false) }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.register("test-with-bytebuddy-agent", Test) {
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
        enabled = false
    } else {
        jvmArgs(
            "-javaagent:${bytebuddyAgentConf.asPath}",
//            "-Djdk.instrument.traceUsage",
        )
    }
}

tasks.register("test-with-mockito-agent", Test) {
    dependsOn(':mockito-core:jar')
    if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
        enabled = false
    } else {
        jvmArgs(
            "-javaagent:${project(":mockito-core").tasks.jar.outputs.files.singleFile}",
//            "-Djdk.instrument.traceUsage",
        )
    }
    failIfStdErrWarningOnDynamicallyLoadedAgent(it)
}

tasks.named('test', Test) {
//    dependsOn(
//        "test-with-bytebuddy-agent",
//        "test-with-mockito-agent",
//    )
    enabled JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)

    expectStdErrWhenDynamicallyLoadedAgent(it)
}

private static void failIfStdErrWarningOnDynamicallyLoadedAgent(Test testTask) {
    def stderrMessages = new ArrayList<String>()
    testTask.addTestOutputListener { descriptor, event ->
        if (event.destination == TestOutputEvent.Destination.StdErr) {
            stderrMessages.add(event.message)
        }
    }
    testTask.doLast {
        def stderrText = stderrMessages.join '\n'
        if (stderrText.contains("A Java agent has been loaded dynamically")
            && stderrText.contains("net.bytebuddy/byte-buddy-agent")
            && stderrText.contains("If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning")
        ) {
            throw new GradleException("JDK should no emit warning when mockito is set as agent and -XX:+EnableDynamicAgentLoading is not set")
        }
    }
}

private static void expectStdErrWhenDynamicallyLoadedAgent(Test testTask) {
    def stderrMessages = new ArrayList<String>()
    testTask.addTestOutputListener { descriptor, event ->
        if (event.destination == TestOutputEvent.Destination.StdErr) {
            stderrMessages.add(event.message)
        }
    }
    testTask.doLast {
        def stdoutText = stderrMessages.join '\n'
        if (!stdoutText.contains("Mockito is currently self-attaching to enable the inline-mock-maker.")) {
            throw new GradleException("Mockito should emit a message when self-attaching")
        }
    }
}
