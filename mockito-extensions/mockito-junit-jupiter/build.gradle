import aQute.bnd.gradle.Resolve

plugins {
    id("mockito.library-conventions")
    id("mockito.javadoc-conventions")
}

description = "Mockito JUnit 5 support"

dependencies {
    api project(":mockito-core")
    implementation libs.junit.jupiter.api
    testImplementation libs.assertj
    testImplementation libs.junit.platform.launcher
    testRuntimeOnly libs.junit.jupiter.engine
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

mockitoJavadoc {
    title = "Mockito JUnit Jupiter ${project.version} API"
    docTitle = """<h1>Mockito JUnit Jupiter ${project.version} API.</h1>"""
}

jar {
    bundle { // this: BundleTaskExtension
        classpath = project.configurations.runtimeClasspath
        bnd(
            'Bundle-Name': 'Mockito Extension Library for JUnit 5.',
            'Bundle-SymbolicName': 'org.mockito.junit-jupiter',
            'Bundle-Version': "\${version_cleanup;${project.version}}",
            '-versionpolicy': '[${version;==;${@}},${version;+;${@}})',
            'Export-Package': "org.mockito.junit.jupiter.*;version=${archiveVersion.get()}",
            '-removeheaders': 'Private-Package',
            'Automatic-Module-Name': 'org.mockito.junit.jupiter',
            '-noextraheaders': 'true',
            '-export-apiguardian': 'org.mockito.internal.*'
        )
    }
}

// Bnd's Resolve task uses a properties file for its configuration. This
// task writes out the properties necessary for it to verify the OSGi
// metadata.
def osgiProperties = tasks.register('osgiProperties', WriteProperties) {
  destinationFile = layout.buildDirectory.file("verifyOSGiProperties.bndrun")
  property('-standalone', true)
  property('-runee', "JavaSE-${java.targetCompatibility}")
  property('-runrequires', 'osgi.identity;filter:="(osgi.identity=org.mockito.junit-jupiter)"')
}

// Bnd's Resolve task is what verifies that a jar can be used in OSGi and
// that its metadata is valid. If the metadata is invalid this task will
// fail.
def verifyOSGi = tasks.register('verifyOSGi', Resolve) {
  getBndrun().value(osgiProperties.flatMap { it.destinationFile })
  getOutputBndrun().set(layout.buildDirectory.file("resolvedOSGiProperties.bndrun"))
  reportOptional = false
}

tasks.named('check') {
  dependsOn(verifyOSGi)
}

tasks.named("javadoc", Javadoc) {
    // Handle https://bugs.openjdk.org/browse/JDK-8274639
    // Note : Might be solved by a toolchain launcher for the javadoc.
    if (JavaVersion.current() >= JavaVersion.VERSION_18) {
        options.addStringOption("-link-modularity-mismatch", "info")
        options.links("https://junit.org/junit5/docs/${libs.versions.junit.jupiter.get()}/api/")
    } else {
        logger.info("Javadoc tool below 18, links to JUnit Jupiter javadocs was not added.")
    }
}
