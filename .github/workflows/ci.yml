#
# CI build that assembles artifacts and runs tests.
# If validation is successful this workflow releases from the main dev branch.
#
# - skipping CI: add [skip ci] to the commit message
# - skipping release: add [skip release] to the commit message
#
name: CI

on:
  push:
    branches: ['main']
    tags: [v*]
  pull_request:
    branches: ['**']

jobs:

  #
  # Main build job
  #
  build:
    runs-on: ubuntu-latest
    if: "! contains(toJSON(github.event.commits.*.message), '[skip ci]')"

    # Definition of the build matrix
    strategy:
      matrix:
        java: [8, 11, 17]
        mock-maker: ['mock-maker-default', 'mock-maker-inline']

    # All build steps
    # SINGLE-MATRIX-JOB means that the step does not need to be executed on every job in the matrix
    steps:

    - name: 1. Check out code
      uses: actions/checkout@v2.4.0 # https://github.com/actions/checkout
      with:
        fetch-depth: '0' # https://github.com/shipkit/shipkit-changelog#fetch-depth-on-ci

    - name: 2. Set up Java ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: ${{ matrix.java }}

    - name: 3. Validate Gradle wrapper
      if: matrix.java == 8 && matrix.mock-maker == 'mock-maker-default' # SINGLE-MATRIX-JOB
      uses: gradle/wrapper-validation-action@v1.0.4 # https://github.com/gradle/wrapper-validation-action

    - name: 4. Build and check reproducibility of artifacts (single job only)
      if: matrix.java == 8 && matrix.mock-maker == 'mock-maker-default' # SINGLE-MATRIX-JOB
      run: ./check_reproducibility.sh

    - name: 5. Spotless check (single job only). Run './gradlew spotlessApply' locally if this job fails.
      if: matrix.java == 11 && matrix.mock-maker == 'mock-maker-default' # SINGLE-MATRIX-JOB
      run: ./gradlew spotlessCheck

    - name: 6. Build on Java ${{ matrix.java }} with ${{ matrix.mock-maker }}
      run: ./gradlew build idea --scan
      env:
        MOCK_MAKER: ${{ matrix.mock-maker }}

    - name: 7. Upload coverage report
      run: |
        ./gradlew coverageReport -s --scan && cp build/reports/jacoco/mockitoCoverage/mockitoCoverage.xml jacoco.xml
        curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step

        curl -Os https://uploader.codecov.io/latest/linux/codecov
        curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
        curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig

        gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
        shasum -a 256 -c codecov.SHA256SUM

        chmod +x codecov
        ./codecov


  #
  # Release job, only for pushes to the main development branch
  #
  release:
    runs-on: ubuntu-latest
    needs: [build] # build job must pass before we can release

    if: github.event_name == 'push'
        && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        && github.repository == 'mockito/mockito'
        && !contains(toJSON(github.event.commits.*.message), '[skip release]')

    steps:

      - name: Check out code
        uses: actions/checkout@v2.4.0 # https://github.com/actions/checkout
        with:
          fetch-depth: '0' # https://github.com/shipkit/shipkit-changelog#fetch-depth-on-ci

      - name: Set up Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8

      - name: Build and release
        run: ./gradlew githubRelease publishToSonatype closeAndReleaseStagingRepository releaseSummary
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NEXUS_TOKEN_USER: ${{secrets.NEXUS_TOKEN_USER}}
          NEXUS_TOKEN_PWD: ${{secrets.NEXUS_TOKEN_PWD}}
          PGP_KEY: ${{secrets.PGP_KEY}}
          PGP_PWD: ${{secrets.PGP_PWD}}
