buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2' //publishing to bintray
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0' // later versions don't work on JDK6

        //Needed so that release notes and release workflow plugin can be applied in separate gradle/*.gradle build files
        classpath project.'dependencies.mockito-release-tools'
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.0'
}

description = 'Mockito mock objects library core API and implementation'

apply from: 'gradle/root/version.gradle'

ext {
    artifactName = 'mockito-core'
    publishToBintray = true
    syncToCentral = true
}

apply from: "gradle/java-library.gradle"
archivesBaseName = 'mockito-core'
apply from: "gradle/publishable-java-library.gradle"

apply from: 'gradle/root/ide.gradle'
apply from: 'gradle/root/coverage.gradle'
apply from: 'gradle/root/gradle-fix.gradle'

apply from: 'gradle/mockito-core/osgi.gradle'
apply from: 'gradle/mockito-core/javadoc.gradle'
apply from: 'gradle/mockito-core/license.gradle'
apply from: 'gradle/release.gradle'

allprojects {
    repositories {
        jcenter()
    }
    tasks.withType(JavaCompile) {
        //I don't believe those warnings add value given modern IDEs
        options.warnings = false
        options.encoding = 'UTF-8'
    }
}

configurations {
    testUtil //TODO move to separate project
}

dependencies {
    compile 'net.bytebuddy:byte-buddy:1.5.5'
    compile 'net.bytebuddy:byte-buddy-agent:1.5.5'

    provided "junit:junit:4.12", "org.hamcrest:hamcrest-core:1.3"
    compile "org.objenesis:objenesis:2.4"

    testCompile 'org.ow2.asm:asm:5.1'

    testCompile 'org.assertj:assertj-core:1.7.1'

    testRuntime configurations.provided

    testUtil sourceSets.test.output
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task ciBuild {
    //validate the state of the project
    dependsOn { allprojects*.build }
    dependsOn tasks.idea, tasks.eclipse
}

task createTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (System.env.MOCK_MAKER != null) {
        logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(System.env.MOCK_MAKER)
    } else {
        logger.info("Using default MockMaker")
    }
}

task removeTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (mockMakerFile.exists()){
        mockMakerFile.delete()
    }
}

//Making sure that release task is only invoked after the entire ciBuild validation
release.mustRunAfter ciBuild
compileTestJava.dependsOn createTestResources
compileTestJava.finalizedBy removeTestResources

//Posting Build scans to https://scans.gradle.com
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
