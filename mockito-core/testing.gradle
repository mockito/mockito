def java11 = System.env.SIMULATE_JAVA11
if (java11 != null) {
    tasks.named("test", Test) {
        logger.info("$it.path - use Java11 simluation: ${java11}")
        systemProperty "org.mockito.internal.noUnsafeInjection", java11
    }
}

tasks.register("createTestResources") {
    doLast {
        // Configure MockMaker from environment (if specified), otherwise use default
        def mockMakerFile = new File("$sourceSets.test.output.resourcesDir/mockito-extensions/org.mockito.plugins.MockMaker")
        if (System.env.MOCK_MAKER != null && !System.env.MOCK_MAKER.endsWith("default")) {
            logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
            mockMakerFile.parentFile.mkdirs()
            mockMakerFile.createNewFile()
            mockMakerFile.write(System.env.MOCK_MAKER)
        } else {
            logger.info("Using default MockMaker")
        }

        // Configure MemberAccessor from environment (if specified), otherwise use default
        def memberAccessorFile = new File("$sourceSets.test.output.resourcesDir/mockito-extensions/org.mockito.plugins.MemberAccessor")
        if (System.env.MEMBER_ACCESSOR != null  && !System.env.MEMBER_ACCESSOR.endsWith("default")) {
            logger.info("Using MemberAccessor ${System.env.MEMBER_ACCESSOR}")
            memberAccessorFile.parentFile.mkdirs()
            memberAccessorFile.createNewFile()
            memberAccessorFile.write(System.env.MEMBER_ACCESSOR)
        } else {
            logger.info("Using default MemberAccessor")
        }
    }
}

tasks.register("removeTestResources"){
    doLast {
        def mockMakerFile = new File("$sourceSets.test.output.resourcesDir/mockito-extensions/org.mockito.plugins.MockMaker")
        if (mockMakerFile.exists()) {
            mockMakerFile.delete()
        }

        def memberAccessorFile = new File("$sourceSets.test.output.resourcesDir/mockito-extensions/org.mockito.plugins.MemberAccessor")
        if (memberAccessorFile.exists()) {
            memberAccessorFile.delete()
        }
    }
}

tasks.named("processTestResources") {
    finalizedBy(createTestResources)
}
tasks.named("test") {
    finalizedBy(removeTestResources)
}
