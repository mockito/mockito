def troubleshootingInfo = """
Mockito artifacts are about to be published!

In case the release process from Travis CI fails, please try:
  1. push dummy commit
    - useful when the build fails for random reason, let's say a flaky test
  2. update version.properties manually and push (can be done in the browser via GitHub gui)
    - useful when artifact was published but some later release step has failed
    preventing version.properties to be bumped.
  3. delete top release notes paragraph(s) so that they are recreated
    - useful for recreating/merging release notes
"""

import org.mockito.release.version.*

assert project == rootProject

apply from: rootProject.file("gradle/publish.gradle")

apply plugin: 'release-notes'
apply plugin: 'release'

notes {
    notesFile = project.file("doc/release-notes/official.md")
}

def dryRun = project.hasProperty('dryRun')
if (dryRun) {
    //TODO SF lets not use excludedTaskNames to model this
    logger.lifecycle "Automatically scheduling 'rollbackRelease' task"
    rollbackRelease.dependsOn release
    gradle.startParameter.taskNames += "rollbackRelease"
}

configurations {
    previousSrc
    previousPom
}

dependencies {
    previousSrc "org.mockito:mockito-core:${project.notes.getPreviousVersion()}:sources@jar"
    previousPom "org.mockito:mockito-core:${project.notes.getPreviousVersion()}@pom"
}

task("comparePublications", type: org.mockito.release.comparison.PublicationsComparatorTask) {
    dependsOn publishToMavenLocal, sourcesJar

    compareBinaries({ configurations.previousSrc.singleFile }, { sourcesJar.archivePath })
    comparePoms({ configurations.previousPom.singleFile.text }, { generatePomFileForMockitoCorePublication.destination.text })
}

/*
Release process should *not* run concurrently.
 */
task("releaseNeeded") {
    dependsOn comparePublications
    doLast {
        def branch = System.env.TRAVIS_BRANCH
        def pr = System.env.TRAVIS_PULL_REQUEST
        def skipped = System.env.SKIP_RELEASE
        ext.needed = dryRun || (pr == 'false' && branch == 'master' && !comparePublications.publicationsEqual && skipped != 'true')
        logger.lifecycle("Release needed: {}, branch: {}, pull request: {}, dry run: {}, publications equal: {}, skipped: {}.", needed, branch, pr, dryRun, comparePublications.publicationsEqual, skipped)
    }
}

bintrayUpload {
    dependsOn releaseNeeded
    onlyIf { releaseNeeded.needed }
    doFirst {
        logger.lifecycle troubleshootingInfo
        if (dryRun) {
            logger.lifecycle "Dry-running the release"
        }
    }
}

release {
  dependsOn bintrayUpload, releaseNeeded
  onlyIf { releaseNeeded.needed }

  doFirst {
    if (dryRun) {
      logger.lifecycle "Dry-running the release"
    }
  }
}

releaseSteps {
    String currentVersion = project.version //the version loaded when Gradle build has started
    String buildInfo = "by Travis CI build $System.env.TRAVIS_BUILD_NUMBER [ci skip]"
    MaskedArg pushTarget = new MaskedArg(value: "https://szczepiq:${System.env.GH_TOKEN}@github.com/mockito/mockito.git")

    step("ensure good chunk of recent commits is pulled for release notes automation") {
        //Travis default clone is pretty shallow
        run "git", "pull", "--depth", "500"
    }

    def gitAuthor
    step("configure generic git user") { gitAuthor = gitTool.setAuthor("Continuous Delivery Drone", "continuous.delivery.drone@gmail.com") }
    .cleanup { gitAuthor.restoreOriginal() }

    step("commit updated javadoc into gh-pages branch") { commitUpdatedJavadoc(buildInfo) }

    /*
            Now we'll start operating on master. This introduces a problem - someone might have pushed changes *after* release process has started
            What can happen:
             - bintrayUpload will fail saying that the version is already released
             - git push fails saying that the pull is needed
            Resolutions:
             - see 'TROUBLESHOOTING' section at the top of this file
    */

    step("start operating on master") { run "git", "checkout", "master" }

    step("update release notes") { project.notes.updateReleaseNotes() }

    step("commit release notes") { commitReleaseNotes(buildInfo) }
            .rollback { run "git", "reset", "--hard", "HEAD^" }

    step("create new version tag") { createTag(buildInfo, "v${currentVersion}".toString()) }
            .rollback { run "git", "tag", "-d", "v${currentVersion}".toString()}

    step("commit incremented version on master") { commitIncrementedVersion(currentVersion, buildInfo, project.versionFile) }
            .rollback { run "git", "reset", "--hard", "HEAD^" }

    step("push changes to all involved branches") {
        def pushCommandLine = ["git", "push", pushTarget, "master", "gh-pages", "v$currentVersion", "-q"]
        if (dryRun) {
            pushCommandLine << '--dry-run'
        }
        run pushCommandLine
    }
}

/*
TODO:
 - declare release steps and then Gradle plugin adds tasks:
  release, rollbackRelease, releaseStep1, rollbackStep2, releaseSteps1..7
 - improve exception reporting
 - start rolling back from last successful step (e.g. don't rollback the step that failed)
 */

private void commitReleaseNotes(String buildInfo) {
    def notesFile = project.file("doc/release-notes/official.md")
    run "git", "add", "$notesFile" as String
    run "git", "commit", "-m", '"Update release notes ' + buildInfo + '"', "$notesFile" as String
}

private void createTag(String buildInfo, String tag) {
    String tagMessage = "Create tag ${tag} ${buildInfo}"
    run "git", "tag", "-a", tag, "-m", "$tagMessage" as String
}

private void commitIncrementedVersion(String currentVersion, String buildInfo, VersionFile versionFile) {
    String nextVersion = versionFile.incrementVersion()
    String message = "Increment version '$currentVersion' -> '$nextVersion' $buildInfo"
    run "git", "commit", "-m", "$message" as String, "version.properties"
}

private void commitUpdatedJavadoc(String buildInfo) {
    run "git", "fetch", "origin", "+gh-pages:gh-pages"
    run "git", "checkout", "gh-pages"
    run "git", "rm", "-r", "docs/current", "-q"
    project.copy {
        from "build/javadoc"
        into "docs/$project.version"
    }
    project.copy {
        from "build/javadoc"
        into "docs/current"
    }
    run "git", "add", "docs"
    run "git", "commit", "-m", '"Refresh javadoc ' + buildInfo + '"', "-q"
}

void run(Object ... args) {
    run(args as List)
}

void run(Collection args) {
    logger.lifecycle("--- Executing: {}", args.join(" "))
    exec { commandLine args.collect { it instanceof MaskedArg? it.value : it.toString()} }
    logger.lifecycle("--- Completed!", args)
}

class MaskedArg {
    String value
    String toString() { "<masked>" }
}

/*
TODO:
-update issues and tell which version contains a fix for given issue
-release process performs dry run first, if it is successful it makes the actual release
-steps are better described and log stuff verbosely only in case of failure
-steps can be rolled back:
  -tag removal
  -new commits removal (git reset --hard) on all affected branches
-clean up after release:
 -?
 */