if (!project.hasProperty("jacoco")) {
    //JaCoCo plugin prevents using Build Cache. We will enable jacoco configuration only when specific property is supplied
    //TODO remove this workaround when we migrate to Gradle 5.0 (https://github.com/gradle/gradle/issues/5269)
    logger.info "JaCoCo code coverage will not be configured because 'jacoco' project property is not present."
    return //don't evaluate this Gradle file any further
} else {
    logger.lifecycle "Configuring JaCoCo code coverage because 'jacoco' project property is present."
}

//TODO: Standard JaCoCo coverage doesn't work in Android module
task mockitoCoverage(type: JacocoReport) {

    allprojects { currentProject ->
        plugins.withId("java") {
            mockitoCoverage.sourceSets currentProject.sourceSets.main

            apply plugin: "jacoco"

            jacoco {
                toolVersion = '0.8.2'

                if (currentProject != rootProject) {   //already automatically enhanced in mockito main project as "java" plugin was applied before
                    applyTo test
                }
            }

            currentProject.tasks.withType(Test) { testTask ->
                mockitoCoverage.dependsOn testTask
            }
        }
    }

    executionData(file("$buildDir/jacoco/test.exec"))

    reports {
        xml.enabled true
        html.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
      classDirectories = files(classDirectories.files.collect {
        fileTree(
          dir: it,
          exclude: ['**/org/mockito/internal/util/concurrent/**']
        )
      })
    }

    doLast {
        logger.lifecycle "Jacoco HTML created: file://${new File(reports.html.destination, "index.html").toURI().path}"
    }
}

task coverageReport(dependsOn: ["mockitoCoverage"]) {}
