//vanilla javadoc task does not work for us and it actually fails on java8
tasks.javadoc.enabled = false

task mockitoJavadoc(type: Javadoc) {
    description "Creates javadoc html for Mockito API."
    tasks.javadoc.dependsOn it //so that when the user invokes 'javadoc' right things happen

    // For more details on the format
    // see https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html

    classpath = configurations.runtime + configurations.provided
    source = sourceSets.main.allJava
    destinationDir = file("$buildDir/javadoc")
    title = "Mockito ${project.version} API"
    def javadocJdk6Hack = "jdk6-project-version-insert.min.js"

    // In order to exclude the internal classes, we use the doclet instead of Javadoc.exclude API from Gradle
    // This way, we avoid warnings about unsatisfied links to internal documentation
    options.doclet "org.mockito.javadoc.JavadocExclude"
    options.docletpath = [rootProject.file('./buildSrc/build/classes/main/')]

    options.docTitle = """<h1><a href="org/mockito/Mockito.html">Click to see examples</a>. Mockito ${project.version} API.</h1>"""
    options.windowTitle = "Mockito ${project.version} API"
    options.group("Main package", ["org.mockito"])
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.use = true
    options.splitIndex = true
    options.noDeprecated = false
    options.noDeprecatedList = false
    options.noIndex = false
    options.noNavBar = false
    options.noTree = false
    options.links('http://docs.oracle.com/javase/8/docs/api/')
    options.header("""<script>var l = window.location; if (l.protocol === "http" && l.origin.indexOf("javadoc.io") > -1) { l.protocol = "https"; }</script><em id="mockito-version-header-javadoc7-header"><strong>Mockito ${project.version} API</strong></em>""")
    options.footer("""<em id="mockito-version-header-javadoc7-footer"><strong>Mockito ${project.version} API</strong></em>""")
    options.bottom("""
        <script type="text/javascript" src="{@docRoot}/js/${javadocJdk6Hack}"></script>
        <script type="text/javascript" src="{@docRoot}/js/jquery-1.7.min.js"></script>
        <script type="text/javascript" src="{@docRoot}/js/highlight-8.6-java/highlight.pack.js"></script>

        <link rel="stylesheet" type="text/css" href="{@docRoot}/js/highlight-8.6-java/styles/obsidian.css"/>
        <script type="text/javascript" src="{@docRoot}/js/index.js" async defer></script>
    """.replaceAll(/\r|\n/, ""))
    options.stylesheetFile file("src/javadoc/stylesheet.css")

    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    doLast {
        //copy license files
        copy {
            from "src/javadoc"
            into "$buildDir/javadoc"
        }
        try {
            logger.lifecycle("Installing sw-precache globally")
            exec {
                commandLine "npm", "install", "-g", "sw-precache"
            }
            exec {
                commandLine "sw-precache", "--config=sw-precache-config.json"
            }
            // Even though there is an option ignoreExitValue for exec, exec keeps on throwing exceptions.
            // Therefore we just have to catch them and continue on with the build.
        } catch(Exception ignored) {
            logger.lifecycle("NPM is not installed. Aborting generating service-worker");
        }
    }
}