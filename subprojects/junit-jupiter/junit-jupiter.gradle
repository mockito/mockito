import aQute.bnd.gradle.Resolve

plugins {
    id 'biz.aQute.bnd.builder'
}

apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/java-library.gradle"

apply from: "$rootDir/gradle/mockito-junit-jupiter/javadoc.gradle"

description = "Mockito JUnit 5 support"

dependencies {
    api project.rootProject
    implementation libraries.junitJupiterApi
    testImplementation libraries.assertj
    testImplementation libraries.junitPlatformLauncher
    testRuntimeOnly libraries.junitJupiterEngine
}

tasks.withType(Test) {
    useJUnitPlatform()
}

jar {
    bundle { // this: BundleTaskExtension
        classpath = project.configurations.runtimeClasspath
        bnd(
            'Bundle-Name': 'Mockito Extension Library for JUnit 5.',
            'Bundle-SymbolicName': 'org.mockito.junit-jupiter',
            'Bundle-Version': "\${version_cleanup;${project.version}}",
            '-versionpolicy': '[${version;==;${@}},${version;+;${@}})',
            'Export-Package': "org.mockito.junit.jupiter.*;version=${archiveVersion.get()}",
            '-removeheaders': 'Private-Package',
            'Automatic-Module-Name': 'org.mockito.junit.jupiter',
            '-noextraheaders': 'true',
            '-export-apiguardian': 'org.mockito.internal.*'
        )
    }
}

// Bnd's Resolve task uses a properties file for its configuration. This
// task writes out the properties necessary for it to verify the OSGi
// metadata.
def osgiProperties = tasks.register('osgiProperties', WriteProperties) {
  destinationFile = layout.buildDirectory.file("verifyOSGiProperties.bndrun")
  property('-standalone', true)
  property('-runee', "JavaSE-${java.targetCompatibility}")
  property('-runrequires', 'osgi.identity;filter:="(osgi.identity=org.mockito.junit-jupiter)"')
}

// Bnd's Resolve task is what verifies that a jar can be used in OSGi and
// that its metadata is valid. If the metadata is invalid this task will
// fail.
def verifyOSGi = tasks.register('verifyOSGi', Resolve) {
  getBndrun().value(osgiProperties.flatMap { it.destinationFile })
  getOutputBndrun().set(layout.buildDirectory.file("resolvedOSGiProperties.bndrun"))
  reportOptional = false
}

tasks.named('check') {
  dependsOn(verifyOSGi)
}
